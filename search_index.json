[
["index.html", "Baseball Analytics Workshop (Morning Session) Chapter 1 Software Installation 1.1 Install R 1.2 RStudio", " Baseball Analytics Workshop (Morning Session) Charles Redmond 2019-04-08 Chapter 1 Software Installation To set up for this morning’s session, we will need to install both R and RStudio 1.1 Install R The website for the R Project can be found here: https://www.r-project.org/. Under Download, click CRAN, or simply go here: https://cran.r-project.org/mirrors.html. Choose a location close to you. Let’s go with Case Western. Scroll down to find the Case Western link, or simply go here: https://cran.case.edu/. 1.1.1 Windows If you have Windows, follow the download link for Windows, then choose the base distribution link, and find finally the Download R 3.5.3 for Windows link. Follow the installation instructions. We will be around to help you. 1.1.2 Mac If you have a Mac, follow the download link for Mac and find the R-3.5.3.pkg link. Follow the installation instructions. We will be around to help you. 1.2 RStudio The website for RStudio can be found here: https://www.rstudio.com/. Click the Download RStudio link, or simply go here: https://www.rstudio.com/products/rstudio/download/. Scroll down and find the installer for your operating system. Follow the installation instructions. We will be around to help. "],
["intro-to-rstudio.html", "Chapter 2 Intro to RStudio", " Chapter 2 Intro to RStudio When you launch RStudio, it should look something like this: There you can see three panels. The panel on the left is called the console. If you click the panel icon in the upper right-hand corner of the console, it will open a fourth panel, in the upper left, where we will write our scripts: If you ever wish to clear the console, you can press control-l: "],
["install-lahman.html", "Chapter 3 Install Lahman", " Chapter 3 Install Lahman The first package we will need is the Lahman package, which will give us access to an extensive database of baseball records. To install the Lahman package, type the following in the console and press enter: We will be around to help. After installing the Lahman package, you will need to load it with the library function: "],
["a-look-at-the-tables.html", "Chapter 4 A Look At The Tables", " Chapter 4 A Look At The Tables To see all of the tables available in the Lahman database, type the following in the console, and a list of them will appear above in the source panel: For this session, we will use the Batting table and the Master table, but there are many more that you can explore. Let’s take a look at the Batting table. To see the first few records in the table, you can simply type Batting in the console and press enter. But if you want to control how many records you see, it is best to use the head function: head(Batting,10) ## playerID yearID stint teamID lgID G AB R H X2B X3B HR RBI SB CS BB ## 1 abercda01 1871 1 TRO NA 1 4 0 0 0 0 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 NA 25 118 30 32 6 0 0 13 8 1 4 ## 3 allisar01 1871 1 CL1 NA 29 137 28 40 4 5 0 19 3 1 2 ## 4 allisdo01 1871 1 WS3 NA 27 133 28 44 10 2 2 27 1 1 0 ## 5 ansonca01 1871 1 RC1 NA 25 120 29 39 11 3 0 16 6 2 2 ## 6 armstbo01 1871 1 FW1 NA 12 49 9 11 2 1 0 5 0 1 0 ## 7 barkeal01 1871 1 RC1 NA 1 4 0 1 0 0 0 2 0 0 1 ## 8 barnero01 1871 1 BS1 NA 31 157 66 63 10 9 0 34 11 6 13 ## 9 barrebi01 1871 1 FW1 NA 1 5 1 1 1 0 0 1 0 0 0 ## 10 barrofr01 1871 1 BS1 NA 18 86 13 13 2 1 0 11 1 0 0 ## SO IBB HBP SH SF GIDP ## 1 0 NA NA NA NA NA ## 2 0 NA NA NA NA NA ## 3 5 NA NA NA NA NA ## 4 2 NA NA NA NA NA ## 5 1 NA NA NA NA NA ## 6 1 NA NA NA NA NA ## 7 0 NA NA NA NA NA ## 8 1 NA NA NA NA NA ## 9 0 NA NA NA NA NA ## 10 0 NA NA NA NA NA Here we are looking at the first 10 records of the Batting table. Each player has at least one record for each year he played. If he played for more than one team in a year, he has multiple records for that year, one for each team. By reading the column names, you can see what statistics are available. And you can see that the data goes back to 1871. For the most part, we will be interested in the playerID, yearID, teamID, and HR columns. Before moving on, let’s take a look at the Master table. head(Master,10) ## playerID birthYear birthMonth birthDay birthCountry birthState ## 1 aardsda01 1981 12 27 USA CO ## 2 aaronha01 1934 2 5 USA AL ## 3 aaronto01 1939 8 5 USA AL ## 4 aasedo01 1954 9 8 USA CA ## 5 abadan01 1972 8 25 USA FL ## 6 abadfe01 1985 12 17 D.R. La Romana ## 7 abadijo01 1850 11 4 USA PA ## 8 abbated01 1877 4 15 USA PA ## 9 abbeybe01 1869 11 11 USA VT ## 10 abbeych01 1866 10 14 USA NE ## birthCity deathYear deathMonth deathDay deathCountry deathState ## 1 Denver NA NA NA &lt;NA&gt; &lt;NA&gt; ## 2 Mobile NA NA NA &lt;NA&gt; &lt;NA&gt; ## 3 Mobile 1984 8 16 USA GA ## 4 Orange NA NA NA &lt;NA&gt; &lt;NA&gt; ## 5 Palm Beach NA NA NA &lt;NA&gt; &lt;NA&gt; ## 6 La Romana NA NA NA &lt;NA&gt; &lt;NA&gt; ## 7 Philadelphia 1905 5 17 USA NJ ## 8 Latrobe 1957 1 6 USA FL ## 9 Essex 1962 6 11 USA VT ## 10 Falls City 1926 4 27 USA CA ## deathCity nameFirst nameLast nameGiven weight height ## 1 &lt;NA&gt; David Aardsma David Allan 215 75 ## 2 &lt;NA&gt; Hank Aaron Henry Louis 180 72 ## 3 Atlanta Tommie Aaron Tommie Lee 190 75 ## 4 &lt;NA&gt; Don Aase Donald William 190 75 ## 5 &lt;NA&gt; Andy Abad Fausto Andres 184 73 ## 6 &lt;NA&gt; Fernando Abad Fernando Antonio 220 73 ## 7 Pemberton John Abadie John W. 192 72 ## 8 Fort Lauderdale Ed Abbaticchio Edward James 170 71 ## 9 Colchester Bert Abbey Bert Wood 175 71 ## 10 San Francisco Charlie Abbey Charles S. 169 68 ## bats throws debut finalGame retroID bbrefID deathDate ## 1 R R 2004-04-06 2015-08-23 aardd001 aardsda01 &lt;NA&gt; ## 2 R R 1954-04-13 1976-10-03 aaroh101 aaronha01 &lt;NA&gt; ## 3 R R 1962-04-10 1971-09-26 aarot101 aaronto01 1984-08-16 ## 4 R R 1977-07-26 1990-10-03 aased001 aasedo01 &lt;NA&gt; ## 5 L L 2001-09-10 2006-04-13 abada001 abadan01 &lt;NA&gt; ## 6 L L 2010-07-28 2016-09-25 abadf001 abadfe01 &lt;NA&gt; ## 7 R R 1875-04-26 1875-06-10 abadj101 abadijo01 1905-05-17 ## 8 R R 1897-09-04 1910-09-15 abbae101 abbated01 1957-01-06 ## 9 R R 1892-06-14 1896-09-23 abbeb101 abbeybe01 1962-06-11 ## 10 L L 1893-08-16 1897-08-19 abbec101 abbeych01 1926-04-27 ## birthDate ## 1 1981-12-27 ## 2 1934-02-05 ## 3 1939-08-05 ## 4 1954-09-08 ## 5 1972-08-25 ## 6 1985-12-17 ## 7 1850-11-04 ## 8 1877-04-15 ## 9 1869-11-11 ## 10 1866-10-14 Every player in baseball history, going back to 1871, has exactly one record in the Master table. It is here where you can find biographical information about the players, such as a player’s birthday, height, weight, etc. We will be interested, primarily, in the playerID, nameFirst, and nameLast columns. If there is time, we may also take a look at the Teams table. "],
["install-dplyr.html", "Chapter 5 Install dplyr", " Chapter 5 Install dplyr We will need the dplyr package to extract information from the tables in the Lahman database. To install dplyr, type the following in the console and press enter: After installing dplyr, load the package by typing the following in the console: library(dplyr) "],
["selecting-filtering-and-arranging.html", "Chapter 6 Selecting, Filtering, and Arranging 6.1 Select 6.2 Scripts 6.3 Filter 6.4 Arrange", " Chapter 6 Selecting, Filtering, and Arranging 6.1 Select With dplyr, instead of seeing every column from a table, we may select the particular columns we are interested in. Type the following in the console and press enter: bdat &lt;- Batting %&gt;% select(playerID,yearID,teamID,HR) Now type head(bdat,10) ## playerID yearID teamID HR ## 1 abercda01 1871 TRO 0 ## 2 addybo01 1871 RC1 0 ## 3 allisar01 1871 CL1 0 ## 4 allisdo01 1871 WS3 2 ## 5 ansonca01 1871 RC1 0 ## 6 armstbo01 1871 FW1 0 ## 7 barkeal01 1871 RC1 0 ## 8 barnero01 1871 BS1 0 ## 9 barrebi01 1871 FW1 0 ## 10 barrofr01 1871 BS1 0 Let’s see what is happening here. The select verb of dplyr allows you to select the columns you want to see. However, we need to indicate the data frame from which we wish to select. (What we have been calling “tables” are actually called “data frames” in R, so we will use that terminology from now on.) We use the symbol %% to pipe the Batting data frame into the select function. We store the result into a variable we have called bdat, a generic variable name for baseball data. bdat is now a data frame with just the four columns we have chosen. We view the first few rows of bdat with the head function. 6.2 Scripts It’s time now to make use of the source panel. We will write our code in the source panel and then run it in the console. Let’s do the example above again, but we will try it this new way. Type the following in the source panel: To run your code, select it and then click the Run icon: From now on, we will run all of our code this way. 6.3 Filter You will almost always want to see a subset of the records in a data frame intead of all of them. For instance, we may wish to see just the records where the HR value is 50 or more. For this, we can use the filter verb of dplyr. Type this code in the source panel and run it: bdat &lt;- Batting %&gt;% filter(HR &gt;= 50) %&gt;% select(playerID,yearID,teamID,HR) bdat ## playerID yearID teamID HR ## 1 ruthba01 1920 NYA 54 ## 2 ruthba01 1921 NYA 59 ## 3 ruthba01 1927 NYA 60 ## 4 ruthba01 1928 NYA 54 ## 5 wilsoha01 1930 CHN 56 ## 6 foxxji01 1932 PHA 58 ## 7 foxxji01 1938 BOS 50 ## 8 greenha01 1938 DET 58 ## 9 kinerra01 1947 PIT 51 ## 10 mizejo01 1947 NY1 51 ## 11 kinerra01 1949 PIT 54 ## 12 mayswi01 1955 NY1 51 ## 13 mantlmi01 1956 NYA 52 ## 14 mantlmi01 1961 NYA 54 ## 15 marisro01 1961 NYA 61 ## 16 mayswi01 1965 SFN 52 ## 17 fostege01 1977 CIN 52 ## 18 fieldce01 1990 DET 51 ## 19 belleal01 1995 CLE 50 ## 20 anderbr01 1996 BAL 50 ## 21 mcgwima01 1996 OAK 52 ## 22 griffke02 1997 SEA 56 ## 23 griffke02 1998 SEA 56 ## 24 mcgwima01 1998 SLN 70 ## 25 sosasa01 1998 CHN 66 ## 26 vaughgr01 1998 SDN 50 ## 27 mcgwima01 1999 SLN 65 ## 28 sosasa01 1999 CHN 63 ## 29 sosasa01 2000 CHN 50 ## 30 bondsba01 2001 SFN 73 ## 31 gonzalu01 2001 ARI 57 ## 32 rodrial01 2001 TEX 52 ## 33 sosasa01 2001 CHN 64 ## 34 rodrial01 2002 TEX 57 ## 35 thomeji01 2002 CLE 52 ## 36 jonesan01 2005 ATL 51 ## 37 howarry01 2006 PHI 58 ## 38 ortizda01 2006 BOS 54 ## 39 fieldpr01 2007 MIL 50 ## 40 rodrial01 2007 NYA 54 ## 41 bautijo02 2010 TOR 54 ## 42 davisch02 2013 BAL 53 Note how we filter and then pipe the result into select. Note also that we did not use the head function to view bdat, since bdat is not large and therefore easy to view in its entirety. There is a point worth highlighting here. Mark McGwire had a monster year in 1997, with 58 homeruns. His 1997 year, however, does not appear in our output above. Why is that? It is because he was traded mid-season from the A’s to the Cardinals. He therefore has two 1997 records in the data frame, one with 34 homeruns for the A’s, and another with 24 homeruns for the Cardinals. 6.4 Arrange It might be nice to see the output above in a particular order, say with the most homeruns (Barry Bonds) at the top. You can use the arrange verb for this. Try the following: bdat &lt;- Batting %&gt;% filter(HR &gt;= 50) %&gt;% select(playerID,yearID,teamID,HR) %&gt;% arrange(HR) bdat ## playerID yearID teamID HR ## 1 foxxji01 1938 BOS 50 ## 2 belleal01 1995 CLE 50 ## 3 anderbr01 1996 BAL 50 ## 4 vaughgr01 1998 SDN 50 ## 5 sosasa01 2000 CHN 50 ## 6 fieldpr01 2007 MIL 50 ## 7 kinerra01 1947 PIT 51 ## 8 mizejo01 1947 NY1 51 ## 9 mayswi01 1955 NY1 51 ## 10 fieldce01 1990 DET 51 ## 11 jonesan01 2005 ATL 51 ## 12 mantlmi01 1956 NYA 52 ## 13 mayswi01 1965 SFN 52 ## 14 fostege01 1977 CIN 52 ## 15 mcgwima01 1996 OAK 52 ## 16 rodrial01 2001 TEX 52 ## 17 thomeji01 2002 CLE 52 ## 18 davisch02 2013 BAL 53 ## 19 ruthba01 1920 NYA 54 ## 20 ruthba01 1928 NYA 54 ## 21 kinerra01 1949 PIT 54 ## 22 mantlmi01 1961 NYA 54 ## 23 ortizda01 2006 BOS 54 ## 24 rodrial01 2007 NYA 54 ## 25 bautijo02 2010 TOR 54 ## 26 wilsoha01 1930 CHN 56 ## 27 griffke02 1997 SEA 56 ## 28 griffke02 1998 SEA 56 ## 29 gonzalu01 2001 ARI 57 ## 30 rodrial01 2002 TEX 57 ## 31 foxxji01 1932 PHA 58 ## 32 greenha01 1938 DET 58 ## 33 howarry01 2006 PHI 58 ## 34 ruthba01 1921 NYA 59 ## 35 ruthba01 1927 NYA 60 ## 36 marisro01 1961 NYA 61 ## 37 sosasa01 1999 CHN 63 ## 38 sosasa01 2001 CHN 64 ## 39 mcgwima01 1999 SLN 65 ## 40 sosasa01 1998 CHN 66 ## 41 mcgwima01 1998 SLN 70 ## 42 bondsba01 2001 SFN 73 As you can see, this is almost what we want, except that we want the homeruns in descending order. You can use the desc function for this: bdat &lt;- Batting %&gt;% filter(HR &gt;= 50) %&gt;% select(playerID,yearID,teamID,HR) %&gt;% arrange(desc(HR)) bdat ## playerID yearID teamID HR ## 1 bondsba01 2001 SFN 73 ## 2 mcgwima01 1998 SLN 70 ## 3 sosasa01 1998 CHN 66 ## 4 mcgwima01 1999 SLN 65 ## 5 sosasa01 2001 CHN 64 ## 6 sosasa01 1999 CHN 63 ## 7 marisro01 1961 NYA 61 ## 8 ruthba01 1927 NYA 60 ## 9 ruthba01 1921 NYA 59 ## 10 foxxji01 1932 PHA 58 ## 11 greenha01 1938 DET 58 ## 12 howarry01 2006 PHI 58 ## 13 gonzalu01 2001 ARI 57 ## 14 rodrial01 2002 TEX 57 ## 15 wilsoha01 1930 CHN 56 ## 16 griffke02 1997 SEA 56 ## 17 griffke02 1998 SEA 56 ## 18 ruthba01 1920 NYA 54 ## 19 ruthba01 1928 NYA 54 ## 20 kinerra01 1949 PIT 54 ## 21 mantlmi01 1961 NYA 54 ## 22 ortizda01 2006 BOS 54 ## 23 rodrial01 2007 NYA 54 ## 24 bautijo02 2010 TOR 54 ## 25 davisch02 2013 BAL 53 ## 26 mantlmi01 1956 NYA 52 ## 27 mayswi01 1965 SFN 52 ## 28 fostege01 1977 CIN 52 ## 29 mcgwima01 1996 OAK 52 ## 30 rodrial01 2001 TEX 52 ## 31 thomeji01 2002 CLE 52 ## 32 kinerra01 1947 PIT 51 ## 33 mizejo01 1947 NY1 51 ## 34 mayswi01 1955 NY1 51 ## 35 fieldce01 1990 DET 51 ## 36 jonesan01 2005 ATL 51 ## 37 foxxji01 1938 BOS 50 ## 38 belleal01 1995 CLE 50 ## 39 anderbr01 1996 BAL 50 ## 40 vaughgr01 1998 SDN 50 ## 41 sosasa01 2000 CHN 50 ## 42 fieldpr01 2007 MIL 50 "],
["grouping.html", "Chapter 7 Grouping 7.1 The Basics 7.2 Exercise", " Chapter 7 Grouping 7.1 The Basics Babe Ruth played 22 seasons and therefore has 22 records in the Batting data frame. Each record indicates how many homeruns he hit that particular year. We might, however, be interested in finding out how many homeruns he hit over his entire career. To do this, we could group his 22 records together and then collapse them into one record by summing his homerun values. Let’s first take a look at each of his seasons. We first have to filter so that we are looking just at his records. Then we will select his playerID, teamID, yearID, and HR columns. bdat &lt;- Batting %&gt;% filter(playerID == &quot;ruthba01&quot;) %&gt;% select(playerID,teamID,yearID,HR) bdat ## playerID teamID yearID HR ## 1 ruthba01 BOS 1914 0 ## 2 ruthba01 BOS 1915 4 ## 3 ruthba01 BOS 1916 3 ## 4 ruthba01 BOS 1917 2 ## 5 ruthba01 BOS 1918 11 ## 6 ruthba01 BOS 1919 29 ## 7 ruthba01 NYA 1920 54 ## 8 ruthba01 NYA 1921 59 ## 9 ruthba01 NYA 1922 35 ## 10 ruthba01 NYA 1923 41 ## 11 ruthba01 NYA 1924 46 ## 12 ruthba01 NYA 1925 25 ## 13 ruthba01 NYA 1926 47 ## 14 ruthba01 NYA 1927 60 ## 15 ruthba01 NYA 1928 54 ## 16 ruthba01 NYA 1929 46 ## 17 ruthba01 NYA 1930 49 ## 18 ruthba01 NYA 1931 46 ## 19 ruthba01 NYA 1932 41 ## 20 ruthba01 NYA 1933 34 ## 21 ruthba01 NYA 1934 22 ## 22 ruthba01 BSN 1935 6 (Note the “double equals” sign in the filter function above. ) Now we would like to collapse these 22 records into one by summing the HR values. You can use the group_by and summarize verbs of dplyr to do this. We want to group by playerID. This is what is common to all of Babe Ruth’s records. bdat &lt;- Batting %&gt;% filter(playerID == &quot;ruthba01&quot;) %&gt;% group_by(playerID) %&gt;% summarize(sum(HR)) bdat ## # A tibble: 1 x 2 ## playerID `sum(HR)` ## &lt;chr&gt; &lt;int&gt; ## 1 ruthba01 714 Note that there is no reason to select here. We automatically get the column we are grouping by and the column we are summarizing. Note also that the result, bdat, is now what is called a tibble. To keep things simple, let’s continue to produce data frames. Run this again, with the following change: bdat &lt;- Batting %&gt;% filter(playerID == &quot;ruthba01&quot;) %&gt;% group_by(playerID) %&gt;% summarize(sum(HR)) data.frame(bdat) ## playerID sum.HR. ## 1 ruthba01 714 So, we have Babe Ruth’s 714 homeruns. The column name, however, is not so great. Let’s rename it “careerHR”. Make the following change: bdat &lt;- Batting %&gt;% filter(playerID == &quot;ruthba01&quot;) %&gt;% group_by(playerID) %&gt;% summarize(careerHR = sum(HR)) data.frame(bdat) ## playerID careerHR ## 1 ruthba01 714 Of course, we could summarize the homerun column in a different way. We could, for instance, find the maximum number of homeruns Babe Ruth hit in a season: bdat &lt;- Batting %&gt;% filter(playerID == &quot;ruthba01&quot;) %&gt;% group_by(playerID) %&gt;% summarize(maxHR = max(HR)) data.frame(bdat) ## playerID maxHR ## 1 ruthba01 60 7.2 Exercise Generate the list of players who hit 500 or more career homeruns. Have the players with the most homeruns at the top of the list. Solution bdat &lt;- Batting %&gt;% group_by(playerID) %&gt;% summarize(careerHR = sum(HR)) %&gt;% filter(careerHR &gt;= 500) %&gt;% arrange(desc(careerHR)) data.frame(bdat) ## playerID careerHR ## 1 bondsba01 762 ## 2 aaronha01 755 ## 3 ruthba01 714 ## 4 rodrial01 696 ## 5 mayswi01 660 ## 6 griffke02 630 ## 7 thomeji01 612 ## 8 sosasa01 609 ## 9 pujolal01 591 ## 10 robinfr02 586 ## 11 mcgwima01 583 ## 12 killeha01 573 ## 13 palmera01 569 ## 14 jacksre01 563 ## 15 ramirma02 555 ## 16 schmimi01 548 ## 17 ortizda01 541 ## 18 mantlmi01 536 ## 19 foxxji01 534 ## 20 mccovwi01 521 ## 21 thomafr04 521 ## 22 willite01 521 ## 23 bankser01 512 ## 24 matheed01 512 ## 25 ottme01 511 ## 26 sheffga01 509 ## 27 murraed02 504 Note that the filtering had to be done AFTER the grouping and summarizing. "],
["joins.html", "Chapter 8 Joins 8.1 The Basics 8.2 Exercise 1 8.3 Exercise 2", " Chapter 8 Joins 8.1 The Basics In chapter 6 we generated the list of records where the homerun total was 50 or more. Only each player’s ID was indicated, however. It would be nice to have their names as well. But this information is not in the Batting table, but rather in the Master table. We will therefore have to join the Batting and the Master table. Let’s begin by generating again the list from chapter 6: HR_df &lt;- Batting %&gt;% filter(HR &gt;= 50) %&gt;% select(playerID,yearID,teamID,HR) data.frame(HR_df) ## playerID yearID teamID HR ## 1 ruthba01 1920 NYA 54 ## 2 ruthba01 1921 NYA 59 ## 3 ruthba01 1927 NYA 60 ## 4 ruthba01 1928 NYA 54 ## 5 wilsoha01 1930 CHN 56 ## 6 foxxji01 1932 PHA 58 ## 7 foxxji01 1938 BOS 50 ## 8 greenha01 1938 DET 58 ## 9 kinerra01 1947 PIT 51 ## 10 mizejo01 1947 NY1 51 ## 11 kinerra01 1949 PIT 54 ## 12 mayswi01 1955 NY1 51 ## 13 mantlmi01 1956 NYA 52 ## 14 mantlmi01 1961 NYA 54 ## 15 marisro01 1961 NYA 61 ## 16 mayswi01 1965 SFN 52 ## 17 fostege01 1977 CIN 52 ## 18 fieldce01 1990 DET 51 ## 19 belleal01 1995 CLE 50 ## 20 anderbr01 1996 BAL 50 ## 21 mcgwima01 1996 OAK 52 ## 22 griffke02 1997 SEA 56 ## 23 griffke02 1998 SEA 56 ## 24 mcgwima01 1998 SLN 70 ## 25 sosasa01 1998 CHN 66 ## 26 vaughgr01 1998 SDN 50 ## 27 mcgwima01 1999 SLN 65 ## 28 sosasa01 1999 CHN 63 ## 29 sosasa01 2000 CHN 50 ## 30 bondsba01 2001 SFN 73 ## 31 gonzalu01 2001 ARI 57 ## 32 rodrial01 2001 TEX 52 ## 33 sosasa01 2001 CHN 64 ## 34 rodrial01 2002 TEX 57 ## 35 thomeji01 2002 CLE 52 ## 36 jonesan01 2005 ATL 51 ## 37 howarry01 2006 PHI 58 ## 38 ortizda01 2006 BOS 54 ## 39 fieldpr01 2007 MIL 50 ## 40 rodrial01 2007 NYA 54 ## 41 bautijo02 2010 TOR 54 ## 42 davisch02 2013 BAL 53 Here I did not bother with arranging, and I renamed the data frame. Now let’s pull playerID, nameFirst, and nameLast from the Master table: playerNames_df &lt;- Master %&gt;% select(playerID,nameFirst,nameLast) head(playerNames_df) ## playerID nameFirst nameLast ## 1 aardsda01 David Aardsma ## 2 aaronha01 Hank Aaron ## 3 aaronto01 Tommie Aaron ## 4 aasedo01 Don Aase ## 5 abadan01 Andy Abad ## 6 abadfe01 Fernando Abad I am showing, here, just the top of the playerNames_df data frame. We can now join playerNames_df and HR_df together: result &lt;- inner_join(playerNames_df,HR_df,by = c(&quot;playerID&quot;=&quot;playerID&quot;)) %&gt;% select(nameFirst,nameLast,yearID,teamID,HR) %&gt;% arrange(desc(HR)) data.frame(result) ## nameFirst nameLast yearID teamID HR ## 1 Barry Bonds 2001 SFN 73 ## 2 Mark McGwire 1998 SLN 70 ## 3 Sammy Sosa 1998 CHN 66 ## 4 Mark McGwire 1999 SLN 65 ## 5 Sammy Sosa 2001 CHN 64 ## 6 Sammy Sosa 1999 CHN 63 ## 7 Roger Maris 1961 NYA 61 ## 8 Babe Ruth 1927 NYA 60 ## 9 Babe Ruth 1921 NYA 59 ## 10 Jimmie Foxx 1932 PHA 58 ## 11 Hank Greenberg 1938 DET 58 ## 12 Ryan Howard 2006 PHI 58 ## 13 Luis Gonzalez 2001 ARI 57 ## 14 Alex Rodriguez 2002 TEX 57 ## 15 Ken Griffey 1997 SEA 56 ## 16 Ken Griffey 1998 SEA 56 ## 17 Hack Wilson 1930 CHN 56 ## 18 Jose Bautista 2010 TOR 54 ## 19 Ralph Kiner 1949 PIT 54 ## 20 Mickey Mantle 1961 NYA 54 ## 21 David Ortiz 2006 BOS 54 ## 22 Alex Rodriguez 2007 NYA 54 ## 23 Babe Ruth 1920 NYA 54 ## 24 Babe Ruth 1928 NYA 54 ## 25 Chris Davis 2013 BAL 53 ## 26 George Foster 1977 CIN 52 ## 27 Mickey Mantle 1956 NYA 52 ## 28 Willie Mays 1965 SFN 52 ## 29 Mark McGwire 1996 OAK 52 ## 30 Alex Rodriguez 2001 TEX 52 ## 31 Jim Thome 2002 CLE 52 ## 32 Cecil Fielder 1990 DET 51 ## 33 Andruw Jones 2005 ATL 51 ## 34 Ralph Kiner 1947 PIT 51 ## 35 Willie Mays 1955 NY1 51 ## 36 Johnny Mize 1947 NY1 51 ## 37 Brady Anderson 1996 BAL 50 ## 38 Albert Belle 1995 CLE 50 ## 39 Prince Fielder 2007 MIL 50 ## 40 Jimmie Foxx 1938 BOS 50 ## 41 Sammy Sosa 2000 CHN 50 ## 42 Greg Vaughn 1998 SDN 50 Note that I decided not to select the playerID here. 8.2 Exercise 1 Include the team name in the list above. Solution First, let’s generate a teamNames_df: teamNames_df &lt;- Teams %&gt;% select(teamID,yearID,name) head(teamNames_df) ## teamID yearID name ## 1 BS1 1871 Boston Red Stockings ## 2 CH1 1871 Chicago White Stockings ## 3 CL1 1871 Cleveland Forest Citys ## 4 FW1 1871 Fort Wayne Kekiongas ## 5 NY2 1871 New York Mutuals ## 6 PH1 1871 Philadelphia Athletics Above we are finding the name associated with each teamID for each year. Now we join: result2 &lt;- inner_join(teamNames_df,result,by=c(&quot;teamID&quot;=&quot;teamID&quot;,&quot;yearID&quot;=&quot;yearID&quot;)) %&gt;% select(nameFirst,nameLast,name,yearID,HR) %&gt;% arrange(desc(HR)) data.frame(result2) ## nameFirst nameLast name yearID HR ## 1 Barry Bonds San Francisco Giants 2001 73 ## 2 Mark McGwire St. Louis Cardinals 1998 70 ## 3 Sammy Sosa Chicago Cubs 1998 66 ## 4 Mark McGwire St. Louis Cardinals 1999 65 ## 5 Sammy Sosa Chicago Cubs 2001 64 ## 6 Sammy Sosa Chicago Cubs 1999 63 ## 7 Roger Maris New York Yankees 1961 61 ## 8 Babe Ruth New York Yankees 1927 60 ## 9 Babe Ruth New York Yankees 1921 59 ## 10 Jimmie Foxx Philadelphia Athletics 1932 58 ## 11 Hank Greenberg Detroit Tigers 1938 58 ## 12 Ryan Howard Philadelphia Phillies 2006 58 ## 13 Luis Gonzalez Arizona Diamondbacks 2001 57 ## 14 Alex Rodriguez Texas Rangers 2002 57 ## 15 Hack Wilson Chicago Cubs 1930 56 ## 16 Ken Griffey Seattle Mariners 1997 56 ## 17 Ken Griffey Seattle Mariners 1998 56 ## 18 Babe Ruth New York Yankees 1920 54 ## 19 Babe Ruth New York Yankees 1928 54 ## 20 Ralph Kiner Pittsburgh Pirates 1949 54 ## 21 Mickey Mantle New York Yankees 1961 54 ## 22 David Ortiz Boston Red Sox 2006 54 ## 23 Alex Rodriguez New York Yankees 2007 54 ## 24 Jose Bautista Toronto Blue Jays 2010 54 ## 25 Chris Davis Baltimore Orioles 2013 53 ## 26 Mickey Mantle New York Yankees 1956 52 ## 27 Willie Mays San Francisco Giants 1965 52 ## 28 George Foster Cincinnati Reds 1977 52 ## 29 Mark McGwire Oakland Athletics 1996 52 ## 30 Alex Rodriguez Texas Rangers 2001 52 ## 31 Jim Thome Cleveland Indians 2002 52 ## 32 Johnny Mize New York Giants 1947 51 ## 33 Ralph Kiner Pittsburgh Pirates 1947 51 ## 34 Willie Mays New York Giants 1955 51 ## 35 Cecil Fielder Detroit Tigers 1990 51 ## 36 Andruw Jones Atlanta Braves 2005 51 ## 37 Jimmie Foxx Boston Red Sox 1938 50 ## 38 Albert Belle Cleveland Indians 1995 50 ## 39 Brady Anderson Baltimore Orioles 1996 50 ## 40 Greg Vaughn San Diego Padres 1998 50 ## 41 Sammy Sosa Chicago Cubs 2000 50 ## 42 Prince Fielder Milwaukee Brewers 2007 50 It takes a little thought to see why we had to join by both teamID and yearID. If we had not, Babe Ruth’s 1927 record, for instance, would have been joined with every record in the Teams table with a New York Yankees ID. 8.3 Exercise 2 Generate the list of players who have 500 or more career homeruns, with their first and last names included instead of their playerID’s. Solution HR_df &lt;- Batting %&gt;% group_by(playerID) %&gt;% summarize(careerHR = sum(HR)) %&gt;% filter(careerHR &gt;= 500) playerNames_df &lt;- Master %&gt;% select(playerID,nameFirst,nameLast) result &lt;- inner_join(playerNames_df,HR_df,by=c(&quot;playerID&quot;=&quot;playerID&quot;)) %&gt;% select(nameFirst,nameLast,careerHR) %&gt;% arrange(desc(careerHR)) data.frame(result) ## nameFirst nameLast careerHR ## 1 Barry Bonds 762 ## 2 Hank Aaron 755 ## 3 Babe Ruth 714 ## 4 Alex Rodriguez 696 ## 5 Willie Mays 660 ## 6 Ken Griffey 630 ## 7 Jim Thome 612 ## 8 Sammy Sosa 609 ## 9 Albert Pujols 591 ## 10 Frank Robinson 586 ## 11 Mark McGwire 583 ## 12 Harmon Killebrew 573 ## 13 Rafael Palmeiro 569 ## 14 Reggie Jackson 563 ## 15 Manny Ramirez 555 ## 16 Mike Schmidt 548 ## 17 David Ortiz 541 ## 18 Mickey Mantle 536 ## 19 Jimmie Foxx 534 ## 20 Willie McCovey 521 ## 21 Frank Thomas 521 ## 22 Ted Williams 521 ## 23 Ernie Banks 512 ## 24 Eddie Mathews 512 ## 25 Mel Ott 511 ## 26 Gary Sheffield 509 ## 27 Eddie Murray 504 "],
["ggplot.html", "Chapter 9 ggplot 9.1 Installation 9.2 A Simple Plot", " Chapter 9 ggplot An excellent package for data visualization in R is ggplot2. We will cover some of the basics. 9.1 Installation To install and load ggplot2, run the following in the console: install.packages(&quot;ggplot2&quot;) library(ggplot2) 9.2 A Simple Plot Let’s plot Babe Ruth’s homerun totals through the years as a simple first example. We will need a data frame with two columns: the years and the homerun totals. Here is the dplyr code: ruth&lt;-Batting %&gt;% filter(playerID == &quot;ruthba01&quot;) %&gt;% select(yearID,HR) data.frame(ruth) ## yearID HR ## 1 1914 0 ## 2 1915 4 ## 3 1916 3 ## 4 1917 2 ## 5 1918 11 ## 6 1919 29 ## 7 1920 54 ## 8 1921 59 ## 9 1922 35 ## 10 1923 41 ## 11 1924 46 ## 12 1925 25 ## 13 1926 47 ## 14 1927 60 ## 15 1928 54 ## 16 1929 46 ## 17 1930 49 ## 18 1931 46 ## 19 1932 41 ## 20 1933 34 ## 21 1934 22 ## 22 1935 6 To begin the plot, we can simply run the following: ggplot() A blank, grey canvas should now appear in the lower right panel of RStudio. Let’s say that we want to simply plot points to indicate the homerun totals. We have to add that geometry to the plot: ggplot() + geom_point() The canvas will still be blank, because we have not indicated the data frame that holds our data. You can do this within the ggplot() function, but, most of the time, I prefer to do this within the geometry. We will also have to indicate which column in the data frame holds the x variable and which holds the y variable. ggplot() + geom_point(data=ruth,aes(x=yearID,y=HR)) The aes function stands for “aesthetics”. You can change color, fill, size, and shape of the points like so: ggplot() + geom_point(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;,fill=&quot;orange&quot;, size=4,shape=25) Experiment with shapes 1 through 25. We could now add a line geometry: ggplot() + geom_line(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;) + geom_point(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;,fill=&quot;orange&quot;,size=3,shape=21) There are various themes that come with ggplot. Here is one: ggplot() + geom_line(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;) + geom_point(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;,fill=&quot;orange&quot;,size=3,shape=21) + theme_minimal() If you install and load the ggthemes package, there are other themes then available to you: install.packages(&quot;ggthemes&quot;) library(ggthemes) ggplot() + geom_line(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;) + geom_point(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;,fill=&quot;orange&quot;,size=3,shape=21) + theme_economist() Finally, a few self-explanatory additions: ggplot() + geom_line(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;) + geom_point(data=ruth,aes(x=yearID,y=HR),color=&quot;blue&quot;,fill=&quot;orange&quot;,size=3,shape=21) + theme_economist() + ggtitle(&quot;Babe Ruth Homerun Totals&quot;) + xlab(&quot;Year&quot;) + ylab(&quot;Season Homerun Totals&quot;) "],
["grouping-in-ggplot.html", "Chapter 10 Grouping in ggplot", " Chapter 10 Grouping in ggplot Let’s add Lou Gehrig’s homerun information to the data frame we constructed in the last chapter: ruthGehrig&lt;-Batting %&gt;% filter(playerID == &quot;ruthba01&quot; | playerID == &quot;gehrilo01&quot;) %&gt;% select(playerID,yearID,HR) data.frame(ruthGehrig) ## playerID yearID HR ## 1 ruthba01 1914 0 ## 2 ruthba01 1915 4 ## 3 ruthba01 1916 3 ## 4 ruthba01 1917 2 ## 5 ruthba01 1918 11 ## 6 ruthba01 1919 29 ## 7 ruthba01 1920 54 ## 8 ruthba01 1921 59 ## 9 ruthba01 1922 35 ## 10 gehrilo01 1923 1 ## 11 ruthba01 1923 41 ## 12 gehrilo01 1924 0 ## 13 ruthba01 1924 46 ## 14 gehrilo01 1925 20 ## 15 ruthba01 1925 25 ## 16 gehrilo01 1926 16 ## 17 ruthba01 1926 47 ## 18 gehrilo01 1927 47 ## 19 ruthba01 1927 60 ## 20 gehrilo01 1928 27 ## 21 ruthba01 1928 54 ## 22 gehrilo01 1929 35 ## 23 ruthba01 1929 46 ## 24 gehrilo01 1930 41 ## 25 ruthba01 1930 49 ## 26 gehrilo01 1931 46 ## 27 ruthba01 1931 46 ## 28 gehrilo01 1932 34 ## 29 ruthba01 1932 41 ## 30 gehrilo01 1933 32 ## 31 ruthba01 1933 34 ## 32 gehrilo01 1934 49 ## 33 ruthba01 1934 22 ## 34 gehrilo01 1935 30 ## 35 ruthba01 1935 6 ## 36 gehrilo01 1936 49 ## 37 gehrilo01 1937 37 ## 38 gehrilo01 1938 29 ## 39 gehrilo01 1939 0 Note the pipe symbol used in the filter for an “or”, and also that we have included the playerID this time to distinguish the players. We can plot the homerun totals for the players separately, in one plot, in the following way: ggplot() + geom_line(data = ruthGehrig,aes(x=yearID,y=HR,group=playerID)) Note the use of group in the aesthetics. We could now distinguish the two line graphs with color (and add point and labels): ggplot() + geom_line(data = ruthGehrig,aes(x=yearID,y=HR,group=playerID,color=playerID)) + geom_point(data = ruthGehrig,aes(x=yearID,y=HR,group=playerID,color=playerID)) + ggtitle(&quot;Ruth and Gehrig HR Totals&quot;) + xlab(&quot;Year&quot;) + ylab(&quot;Season HR Totals&quot;) Note that color is within the aesthetics and is set to a column name. To change the color scheme, we can add a color scale; ggplot() + geom_line(data = ruthGehrig,aes(x=yearID,y=HR,group=playerID,color=playerID)) + geom_point(data = ruthGehrig,aes(x=yearID,y=HR,group=playerID,color=playerID)) + ggtitle(&quot;Ruth and Gehrig HR Totals&quot;) + xlab(&quot;Year&quot;) + ylab(&quot;Season HR Totals&quot;) + scale_color_manual(values=c(&quot;#003f5c&quot;,&quot;#bc5090&quot;)) "],
["facets-in-ggplot.html", "Chapter 11 Facets in ggplot", " Chapter 11 Facets in ggplot In this section, we will plot the homerun performances of the 10 greatest homerun hitters in baseball history. First, let’s generate the list of these ten players; hitters&lt;-Batting %&gt;% group_by(playerID) %&gt;% summarize(careerHR = sum(HR)) %&gt;% top_n(10) ## Selecting by careerHR data.frame(hitters) ## playerID careerHR ## 1 aaronha01 755 ## 2 bondsba01 762 ## 3 griffke02 630 ## 4 mayswi01 660 ## 5 pujolal01 591 ## 6 robinfr02 586 ## 7 rodrial01 696 ## 8 ruthba01 714 ## 9 sosasa01 609 ## 10 thomeji01 612 Note the use of the new function top_n. We can now take the Batting data frame and pull out just the playerID, yearID, and HR columns: HR_df &lt;-Batting %&gt;% select(playerID,yearID,HR) head(HR_df) ## playerID yearID HR ## 1 abercda01 1871 0 ## 2 addybo01 1871 0 ## 3 allisar01 1871 0 ## 4 allisdo01 1871 2 ## 5 ansonca01 1871 0 ## 6 armstbo01 1871 0 Finally, we can join, and we have our dataset: topHitters &lt;- inner_join(hitters,HR_df,by=c(&quot;playerID&quot;)) %&gt;% select(playerID,yearID,HR) data.frame(topHitters) ## playerID yearID HR ## 1 aaronha01 1954 13 ## 2 aaronha01 1955 27 ## 3 aaronha01 1956 26 ## 4 aaronha01 1957 44 ## 5 aaronha01 1958 30 ## 6 aaronha01 1959 39 ## 7 aaronha01 1960 40 ## 8 aaronha01 1961 34 ## 9 aaronha01 1962 45 ## 10 aaronha01 1963 44 ## 11 aaronha01 1964 24 ## 12 aaronha01 1965 32 ## 13 aaronha01 1966 44 ## 14 aaronha01 1967 39 ## 15 aaronha01 1968 29 ## 16 aaronha01 1969 44 ## 17 aaronha01 1970 38 ## 18 aaronha01 1971 47 ## 19 aaronha01 1972 34 ## 20 aaronha01 1973 40 ## 21 aaronha01 1974 20 ## 22 aaronha01 1975 12 ## 23 aaronha01 1976 10 ## 24 bondsba01 1986 16 ## 25 bondsba01 1987 25 ## 26 bondsba01 1988 24 ## 27 bondsba01 1989 19 ## 28 bondsba01 1990 33 ## 29 bondsba01 1991 25 ## 30 bondsba01 1992 34 ## 31 bondsba01 1993 46 ## 32 bondsba01 1994 37 ## 33 bondsba01 1995 33 ## 34 bondsba01 1996 42 ## 35 bondsba01 1997 40 ## 36 bondsba01 1998 37 ## 37 bondsba01 1999 34 ## 38 bondsba01 2000 49 ## 39 bondsba01 2001 73 ## 40 bondsba01 2002 46 ## 41 bondsba01 2003 45 ## 42 bondsba01 2004 45 ## 43 bondsba01 2005 5 ## 44 bondsba01 2006 26 ## 45 bondsba01 2007 28 ## 46 griffke02 1989 16 ## 47 griffke02 1990 22 ## 48 griffke02 1991 22 ## 49 griffke02 1992 27 ## 50 griffke02 1993 45 ## 51 griffke02 1994 40 ## 52 griffke02 1995 17 ## 53 griffke02 1996 49 ## 54 griffke02 1997 56 ## 55 griffke02 1998 56 ## 56 griffke02 1999 48 ## 57 griffke02 2000 40 ## 58 griffke02 2001 22 ## 59 griffke02 2002 8 ## 60 griffke02 2003 13 ## 61 griffke02 2004 20 ## 62 griffke02 2005 35 ## 63 griffke02 2006 27 ## 64 griffke02 2007 30 ## 65 griffke02 2008 15 ## 66 griffke02 2008 3 ## 67 griffke02 2009 19 ## 68 griffke02 2010 0 ## 69 mayswi01 1951 20 ## 70 mayswi01 1952 4 ## 71 mayswi01 1954 41 ## 72 mayswi01 1955 51 ## 73 mayswi01 1956 36 ## 74 mayswi01 1957 35 ## 75 mayswi01 1958 29 ## 76 mayswi01 1959 34 ## 77 mayswi01 1960 29 ## 78 mayswi01 1961 40 ## 79 mayswi01 1962 49 ## 80 mayswi01 1963 38 ## 81 mayswi01 1964 47 ## 82 mayswi01 1965 52 ## 83 mayswi01 1966 37 ## 84 mayswi01 1967 22 ## 85 mayswi01 1968 23 ## 86 mayswi01 1969 13 ## 87 mayswi01 1970 28 ## 88 mayswi01 1971 18 ## 89 mayswi01 1972 0 ## 90 mayswi01 1972 8 ## 91 mayswi01 1973 6 ## 92 pujolal01 2001 37 ## 93 pujolal01 2002 34 ## 94 pujolal01 2003 43 ## 95 pujolal01 2004 46 ## 96 pujolal01 2005 41 ## 97 pujolal01 2006 49 ## 98 pujolal01 2007 32 ## 99 pujolal01 2008 37 ## 100 pujolal01 2009 47 ## 101 pujolal01 2010 42 ## 102 pujolal01 2011 37 ## 103 pujolal01 2012 30 ## 104 pujolal01 2013 17 ## 105 pujolal01 2014 28 ## 106 pujolal01 2015 40 ## 107 pujolal01 2016 31 ## 108 robinfr02 1956 38 ## 109 robinfr02 1957 29 ## 110 robinfr02 1958 31 ## 111 robinfr02 1959 36 ## 112 robinfr02 1960 31 ## 113 robinfr02 1961 37 ## 114 robinfr02 1962 39 ## 115 robinfr02 1963 21 ## 116 robinfr02 1964 29 ## 117 robinfr02 1965 33 ## 118 robinfr02 1966 49 ## 119 robinfr02 1967 30 ## 120 robinfr02 1968 15 ## 121 robinfr02 1969 32 ## 122 robinfr02 1970 25 ## 123 robinfr02 1971 28 ## 124 robinfr02 1972 19 ## 125 robinfr02 1973 30 ## 126 robinfr02 1974 20 ## 127 robinfr02 1974 2 ## 128 robinfr02 1975 9 ## 129 robinfr02 1976 3 ## 130 rodrial01 1994 0 ## 131 rodrial01 1995 5 ## 132 rodrial01 1996 36 ## 133 rodrial01 1997 23 ## 134 rodrial01 1998 42 ## 135 rodrial01 1999 42 ## 136 rodrial01 2000 41 ## 137 rodrial01 2001 52 ## 138 rodrial01 2002 57 ## 139 rodrial01 2003 47 ## 140 rodrial01 2004 36 ## 141 rodrial01 2005 48 ## 142 rodrial01 2006 35 ## 143 rodrial01 2007 54 ## 144 rodrial01 2008 35 ## 145 rodrial01 2009 30 ## 146 rodrial01 2010 30 ## 147 rodrial01 2011 16 ## 148 rodrial01 2012 18 ## 149 rodrial01 2013 7 ## 150 rodrial01 2015 33 ## 151 rodrial01 2016 9 ## 152 ruthba01 1914 0 ## 153 ruthba01 1915 4 ## 154 ruthba01 1916 3 ## 155 ruthba01 1917 2 ## 156 ruthba01 1918 11 ## 157 ruthba01 1919 29 ## 158 ruthba01 1920 54 ## 159 ruthba01 1921 59 ## 160 ruthba01 1922 35 ## 161 ruthba01 1923 41 ## 162 ruthba01 1924 46 ## 163 ruthba01 1925 25 ## 164 ruthba01 1926 47 ## 165 ruthba01 1927 60 ## 166 ruthba01 1928 54 ## 167 ruthba01 1929 46 ## 168 ruthba01 1930 49 ## 169 ruthba01 1931 46 ## 170 ruthba01 1932 41 ## 171 ruthba01 1933 34 ## 172 ruthba01 1934 22 ## 173 ruthba01 1935 6 ## 174 sosasa01 1989 1 ## 175 sosasa01 1989 3 ## 176 sosasa01 1990 15 ## 177 sosasa01 1991 10 ## 178 sosasa01 1992 8 ## 179 sosasa01 1993 33 ## 180 sosasa01 1994 25 ## 181 sosasa01 1995 36 ## 182 sosasa01 1996 40 ## 183 sosasa01 1997 36 ## 184 sosasa01 1998 66 ## 185 sosasa01 1999 63 ## 186 sosasa01 2000 50 ## 187 sosasa01 2001 64 ## 188 sosasa01 2002 49 ## 189 sosasa01 2003 40 ## 190 sosasa01 2004 35 ## 191 sosasa01 2005 14 ## 192 sosasa01 2007 21 ## 193 thomeji01 1991 1 ## 194 thomeji01 1992 2 ## 195 thomeji01 1993 7 ## 196 thomeji01 1994 20 ## 197 thomeji01 1995 25 ## 198 thomeji01 1996 38 ## 199 thomeji01 1997 40 ## 200 thomeji01 1998 30 ## 201 thomeji01 1999 33 ## 202 thomeji01 2000 37 ## 203 thomeji01 2001 49 ## 204 thomeji01 2002 52 ## 205 thomeji01 2003 47 ## 206 thomeji01 2004 42 ## 207 thomeji01 2005 7 ## 208 thomeji01 2006 42 ## 209 thomeji01 2007 35 ## 210 thomeji01 2008 34 ## 211 thomeji01 2009 23 ## 212 thomeji01 2009 0 ## 213 thomeji01 2010 25 ## 214 thomeji01 2011 12 ## 215 thomeji01 2011 3 ## 216 thomeji01 2012 5 ## 217 thomeji01 2012 3 We could now plot the homerun performances: ggplot() + geom_line(data=topHitters,aes(x=yearID,y=HR,group=playerID,color=playerID)) + theme_minimal() The three distinct group is certainly interesting! Otherwise, it is a bit of a mess. But we can use faceting to give a clearer presentation: ggplot() + geom_line(data=topHitters,aes(x=yearID,y=HR,group=playerID,color=playerID)) + facet_grid(playerID~.) + theme_minimal() If you wanted to layout the plots horizontally, you can use .~playerID, but in this case it does not look very good. ggplot() + geom_line(data=topHitters,aes(x=yearID,y=HR,group=playerID,color=playerID)) + facet_wrap(~playerID) + theme_minimal() Here the plots are simply wrapped around, so there is no concept of vertical or horizontal. "],
["barplots.html", "Chapter 12 Barplots", " Chapter 12 Barplots We’ll end our tutorial with barplots in ggplot. They are useful and popular, but they can be a bit tricky. For an example, let’s consider the main Phillies hitters from the 1970’s (1500 or more at-bats) and how many homeruns they hit. phils&lt;-Batting %&gt;% filter(yearID &gt;= 1970 &amp; yearID &lt;= 1979) %&gt;% filter(teamID == &quot;PHI&quot;) %&gt;% group_by(playerID) %&gt;% summarize(decadeHR = sum(HR),decadeAB = sum(AB)) %&gt;% filter(decadeAB &gt;= 1500) data.frame(phils) ## playerID decadeHR decadeAB ## 1 boonebo01 52 2983 ## 2 bowala01 11 5915 ## 3 cashda01 7 2052 ## 4 doylede01 9 1567 ## 5 luzingr01 204 4262 ## 6 maddoga01 48 2622 ## 7 montawi01 63 2318 ## 8 schmimi01 235 3713 ggplot() + geom_bar(data=phils,aes(x=playerID,y=decadeHR),stat=(&quot;identity&quot;),color=&quot;red&quot;, fill=&quot;lightskyblue&quot;) + theme_minimal() The stat=(“identity”) is necessary to connect the categories (the players) with the measurements (the decade homerun totals). Note that the categories are put in alphabetical order. This would be true even if we had arranged the records in ascending or descending order. What we need to do is to change the data type of the playerID column from character to factor (which makes them, more properly, categories): phils$playerID &lt;- factor(phils$playerID) The $ notation is how you refer to a column in R. Let’s now look at the structure of this column: str(phils$playerID) ## Factor w/ 8 levels &quot;boonebo01&quot;,&quot;bowala01&quot;,..: 1 2 3 4 5 6 7 8 The playerID variable is now a factor with eight levels. However, as you can see, levels are in alphabetical order. We could change this by adding, as an argument, levels=c(“schmimi01”,“luzingr01”,…), putting the levels in the order we desire. This, however, is tedious. Instead, we could first arrange the data frame phils&lt;-Batting %&gt;% filter(yearID &gt;= 1970 &amp; yearID &lt;= 1979) %&gt;% filter(teamID == &quot;PHI&quot;) %&gt;% group_by(playerID) %&gt;% summarize(decadeHR = sum(HR),decadeAB = sum(AB)) %&gt;% filter(decadeAB &gt;= 1500) %&gt;% arrange(desc(decadeHR)) data.frame(phils) ## playerID decadeHR decadeAB ## 1 schmimi01 235 3713 ## 2 luzingr01 204 4262 ## 3 montawi01 63 2318 ## 4 boonebo01 52 2983 ## 5 maddoga01 48 2622 ## 6 bowala01 11 5915 ## 7 doylede01 9 1567 ## 8 cashda01 7 2052 and then use the playerID column itself to order the levels: phils$playerID &lt;- factor(phils$playerID,levels=phils$playerID) Now, we try the plot again: ggplot() + geom_bar(data=phils,aes(x=playerID,y=decadeHR),stat=(&quot;identity&quot;),color=&quot;red&quot;, fill=&quot;lightskyblue&quot;) + theme_minimal() + ggtitle(&quot;Phils Homeruns &#39;70&#39;s&quot;) + xlab(&quot;Player&quot;) + ylab(&quot;Homerun Total&quot;) You could also flip the coordinates: ggplot() + geom_bar(data=phils,aes(x=playerID,y=decadeHR),stat=(&quot;identity&quot;),color=&quot;red&quot;, fill=&quot;lightskyblue&quot;) + theme_minimal() + ggtitle(&quot;Phils Homeruns &#39;70&#39;s&quot;) + xlab(&quot;Player&quot;) + ylab(&quot;Homerun Total&quot;) + coord_flip() In this case, I think I prefer ascending order, so I could simply revise the data frame, factor, and plot again: "],
["putting-all-together.html", "Chapter 13 Putting All Together", " Chapter 13 Putting All Together As a final exercise, let’s do the example from the last chapter, but with the Pirates as well. phils&lt;-Batting %&gt;% filter(yearID &gt;= 1970 &amp; yearID &lt;= 1979) %&gt;% filter(teamID == &quot;PHI&quot;) %&gt;% group_by(playerID) %&gt;% summarize(decadeHR = sum(HR),decadeAB = sum(AB)) %&gt;% mutate(playerTeam = paste(playerID,&quot;PHI&quot;,sep=&quot;&quot;),team=&quot;phillies&quot;) %&gt;% select(playerTeam,decadeHR,decadeAB,team) %&gt;% filter(decadeAB &gt;= 1500) data.frame(phils) ## playerTeam decadeHR decadeAB team ## 1 boonebo01PHI 52 2983 phillies ## 2 bowala01PHI 11 5915 phillies ## 3 cashda01PHI 7 2052 phillies ## 4 doylede01PHI 9 1567 phillies ## 5 luzingr01PHI 204 4262 phillies ## 6 maddoga01PHI 48 2622 phillies ## 7 montawi01PHI 63 2318 phillies ## 8 schmimi01PHI 235 3713 phillies pirates&lt;-Batting %&gt;% filter(yearID &gt;= 1970 &amp; yearID &lt;= 1979) %&gt;% filter(teamID == &quot;PIT&quot;) %&gt;% group_by(playerID) %&gt;% summarize(decadeHR = sum(HR),decadeAB = sum(AB)) %&gt;% mutate(playerTeam = paste(playerID,&quot;PIT&quot;,sep=&quot;&quot;),team=&quot;pirates&quot;) %&gt;% select(playerTeam,decadeHR,decadeAB,team) %&gt;% filter(decadeAB &gt;= 1500) data.frame(pirates) ## playerTeam decadeHR decadeAB team ## 1 cashda01PIT 8 1549 pirates ## 2 garneph01PIT 38 1662 pirates ## 3 hebneri01PIT 113 3200 pirates ## 4 morenom01PIT 19 1830 pirates ## 5 oliveal01PIT 118 4555 pirates ## 6 parkeda01PIT 122 3294 pirates ## 7 roberbo01PIT 103 2051 pirates ## 8 robinbi02PIT 91 2020 pirates ## 9 sanguma01PIT 54 3888 pirates ## 10 stargwi01PIT 296 4399 pirates ## 11 stennre01PIT 38 4037 pirates ## 12 taverfr01PIT 1 2476 pirates ## 13 ziskri01PIT 69 2006 pirates There are a few new ideas here. First, we have used mutate to create two new columns. We created the “playerTeam” column by pasting the teamID onto the playerID. We did this because there is one player who played for both teams during the ’70’s and we need to have distinct categories. So “playerTeam” will be our category column instead of “playerID”. We have also added a “team” column so that we can easily distinguish between Phillies and Pirate records when plotting. We can now stack the two data frames in this way: philsPirates &lt;- rbind(phils,pirates) %&gt;% arrange(decadeHR) philsPirates$playerTeam &lt;- factor(philsPirates$playerTeam,levels=philsPirates$playerTeam) data.frame(philsPirates) ## playerTeam decadeHR decadeAB team ## 1 taverfr01PIT 1 2476 pirates ## 2 cashda01PHI 7 2052 phillies ## 3 cashda01PIT 8 1549 pirates ## 4 doylede01PHI 9 1567 phillies ## 5 bowala01PHI 11 5915 phillies ## 6 morenom01PIT 19 1830 pirates ## 7 garneph01PIT 38 1662 pirates ## 8 stennre01PIT 38 4037 pirates ## 9 maddoga01PHI 48 2622 phillies ## 10 boonebo01PHI 52 2983 phillies ## 11 sanguma01PIT 54 3888 pirates ## 12 montawi01PHI 63 2318 phillies ## 13 ziskri01PIT 69 2006 pirates ## 14 robinbi02PIT 91 2020 pirates ## 15 roberbo01PIT 103 2051 pirates ## 16 hebneri01PIT 113 3200 pirates ## 17 oliveal01PIT 118 4555 pirates ## 18 parkeda01PIT 122 3294 pirates ## 19 luzingr01PHI 204 4262 phillies ## 20 schmimi01PHI 235 3713 phillies ## 21 stargwi01PIT 296 4399 pirates At the same time, we also arranged and factored. Now we can plot the two together: ggplot()+ geom_bar(data=philsPirates,aes(x=playerTeam,y=decadeHR,color=team,fill=team), stat=(&quot;identity&quot;)) + scale_color_manual(values=c(&quot;red&quot;,&quot;black&quot;)) + scale_fill_manual(values=c(&quot;lightskyblue&quot;,&quot;gold&quot;)) + theme_minimal() + coord_flip() Finally, we can try faceting: ggplot()+ geom_bar(data=philsPirates,aes(x=playerTeam,y=decadeHR,color=team,fill=team), stat=(&quot;identity&quot;)) + scale_color_manual(values=c(&quot;red&quot;,&quot;black&quot;)) + scale_fill_manual(values=c(&quot;lightskyblue&quot;,&quot;gold&quot;)) + theme_minimal() + coord_flip() + facet_grid(.~team) Of course, the plot would be better had we used names instead of playerID as the categories. "]
]
